// <auto-generated />
using System;
using ClinicBooking.DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClinicBooking.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250704082647_addBioConsultantFeesPhoneToDoctor")]
    partial class addBioConsultantFeesPhoneToDoctor
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ClinicBooking.DAL.Data.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("appointments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentDate = new DateTime(2025, 7, 1, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 1,
                            PatientId = 1,
                            Status = "Scheduled"
                        },
                        new
                        {
                            Id = 2,
                            AppointmentDate = new DateTime(2025, 7, 2, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 1,
                            PatientId = 2,
                            Status = "Completed"
                        },
                        new
                        {
                            Id = 3,
                            AppointmentDate = new DateTime(2025, 7, 3, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 2,
                            PatientId = 1,
                            Status = "Cancelled"
                        },
                        new
                        {
                            Id = 4,
                            AppointmentDate = new DateTime(2025, 7, 4, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 2,
                            PatientId = 2,
                            Status = "Scheduled"
                        },
                        new
                        {
                            Id = 5,
                            AppointmentDate = new DateTime(2025, 7, 5, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 1,
                            PatientId = 1,
                            Status = "NoShow"
                        });
                });

            modelBuilder.Entity("ClinicBooking.DAL.Data.Entities.Availability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("availabilities", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Day = "Monday",
                            DoctorId = 1,
                            EndTime = new TimeSpan(0, 12, 0, 0, 0),
                            StartTime = new TimeSpan(0, 9, 0, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            Day = "Wednesday",
                            DoctorId = 1,
                            EndTime = new TimeSpan(0, 13, 0, 0, 0),
                            StartTime = new TimeSpan(0, 10, 0, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            Day = "Tuesday",
                            DoctorId = 2,
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            StartTime = new TimeSpan(0, 11, 0, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            Day = "Thursday",
                            DoctorId = 2,
                            EndTime = new TimeSpan(0, 12, 0, 0, 0),
                            StartTime = new TimeSpan(0, 9, 0, 0, 0)
                        },
                        new
                        {
                            Id = 5,
                            Day = "Friday",
                            DoctorId = 1,
                            EndTime = new TimeSpan(0, 12, 30, 0, 0),
                            StartTime = new TimeSpan(0, 10, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("ClinicBooking.DAL.Data.Entities.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bio")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<decimal>("ConsultationFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SpecialtyId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("doctors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bio = "Senior Doctor",
                            ConsultationFee = 1000m,
                            Name = "Dr. Ahmed",
                            SpecialtyId = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            Bio = "Specialist",
                            ConsultationFee = 1000m,
                            Name = "Dr. Mona",
                            SpecialtyId = 2,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("ClinicBooking.DAL.Data.Entities.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("patients", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 30,
                            FName = "Ali",
                            Gender = "Male",
                            LName = "Hassan",
                            Phone = "0100000001",
                            UserId = 4
                        },
                        new
                        {
                            Id = 2,
                            Age = 25,
                            FName = "Sara",
                            Gender = "Female",
                            LName = "Youssef",
                            Phone = "0100000002",
                            UserId = 5
                        });
                });

            modelBuilder.Entity("ClinicBooking.DAL.Data.Entities.Specialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("specialities", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cardiology"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Dermatology"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Pediatrics"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Neurology"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Orthopedics"
                        });
                });

            modelBuilder.Entity("ClinicBooking.DAL.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@gmail.com",
                            PasswordHash = new byte[0],
                            PasswordSalt = new byte[0],
                            PhoneNumber = "123456789",
                            Role = "Admin",
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Email = "doctor1@gmail.com",
                            PasswordHash = new byte[0],
                            PasswordSalt = new byte[0],
                            PhoneNumber = "123456789",
                            Role = "Doctor",
                            UserName = "doctor1"
                        },
                        new
                        {
                            Id = 3,
                            Email = "doctor2@gmail.com",
                            PasswordHash = new byte[0],
                            PasswordSalt = new byte[0],
                            PhoneNumber = "123456789",
                            Role = "Doctor",
                            UserName = "doctor2"
                        },
                        new
                        {
                            Id = 4,
                            Email = "patient1@gmail.com",
                            PasswordHash = new byte[0],
                            PasswordSalt = new byte[0],
                            PhoneNumber = "123456789",
                            Role = "Patient",
                            UserName = "patient1"
                        },
                        new
                        {
                            Id = 5,
                            Email = "patient2@gmail.com",
                            PasswordHash = new byte[0],
                            PasswordSalt = new byte[0],
                            PhoneNumber = "123456789",
                            Role = "Patient",
                            UserName = "patient2"
                        });
                });

            modelBuilder.Entity("ClinicBooking.DAL.Data.Entities.Appointment", b =>
                {
                    b.HasOne("ClinicBooking.DAL.Data.Entities.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClinicBooking.DAL.Data.Entities.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ClinicBooking.DAL.Data.Entities.Availability", b =>
                {
                    b.HasOne("ClinicBooking.DAL.Data.Entities.Doctor", "Doctor")
                        .WithMany("Availabilities")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("ClinicBooking.DAL.Data.Entities.Doctor", b =>
                {
                    b.HasOne("ClinicBooking.DAL.Data.Entities.Specialty", "Specialty")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicBooking.DAL.Data.Entities.User", "User")
                        .WithOne("Doctor")
                        .HasForeignKey("ClinicBooking.DAL.Data.Entities.Doctor", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Specialty");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClinicBooking.DAL.Data.Entities.Patient", b =>
                {
                    b.HasOne("ClinicBooking.DAL.Data.Entities.User", "User")
                        .WithOne("Patient")
                        .HasForeignKey("ClinicBooking.DAL.Data.Entities.Patient", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClinicBooking.DAL.Data.Entities.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Availabilities");
                });

            modelBuilder.Entity("ClinicBooking.DAL.Data.Entities.Patient", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("ClinicBooking.DAL.Data.Entities.Specialty", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("ClinicBooking.DAL.Data.Entities.User", b =>
                {
                    b.Navigation("Doctor")
                        .IsRequired();

                    b.Navigation("Patient")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
